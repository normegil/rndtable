import { BorderHorizontal, BorderVertical } from "borders.slint";
import { Palette } from "../palette.slint";
import { ScrollView } from "std-widgets.slint";

export struct TabData {
    workspace_name: string,
    id: string,
    name: string,
    content: string,
}

component TabButton inherits Rectangle {
    in-out property <TabData> tab;
    in-out property <bool> active;

    callback clicked();
    callback close-tab(TabData, bool);

    width: 150px;

    ta := TouchArea {
        clicked => {
            root.clicked();
        }
    }

    if root.active: BorderHorizontal {
        background: Palette.primary;
    }

    Rectangle {
        Text {
            x: 15px;
            y: 11px;
            width: parent.width - 45px;
            text: tab.name;
            font-size: 14px;
            font-family: "Lora";
            states [
                active when root.active: {
                    color: Palette.text;
                }
                inactive when !root.active: {
                    color: Palette.text-inactive;
                }
            ]
        }

        Text {
            x: parent.width - 25px;
            y: 15px;
            font-size: 10px;
            font-family: "lineicons";
            text: "î«Ž";

            close-ta := TouchArea {
                clicked => {
                    root.close-tab(root.tab, active);
                }
            }
        }

        BorderVertical {
            x: parent.width - 1px;
        }
    }

    if !active: BorderHorizontal {
        y: parent.height - 1px;
    }

    states [
        active when self.active: {
            background: Palette.background-secondary;
        }
        hovered when ta.has-hover: {
            background: Palette.background-secondary;
        }
        not-hovered when !ta.has-hover: {
            background: Palette.background-main;
        }
    ]
}

component TabContent inherits Rectangle{
    in-out property <TabData> tab;

    ScrollView {
        viewport-width: self.width;
        VerticalLayout {
            padding: 10px;
            Rectangle {
                Text {
                    width: parent.width;

                    text: tab.content;
                    font-size: 14px;
                    font-family: "Lora";
                    wrap: TextWrap.word-wrap;
                } 
            }
        }
    }
}

export component Tabs inherits VerticalLayout {
    in-out property <int> active_tab;
    in-out property <[TabData]> tabs;

    callback close-tab(TabData);

    buttons-bar := HorizontalLayout {
        height: 40px;

        for tab[i] in tabs: TabButton {
            tab: tab;
            height: parent.height;
            active: i == active_tab;
            clicked => {
                active_tab = i;
            }
            close-tab(tab-data, active) => {
                if (active) {
                    if (active_tab != 0) {
                        active_tab -= 1;
                    }
                } else {
                    if (active_tab > i) {
                        active_tab -= 1;
                    }
                }
                root.close-tab(tab-data);
            }
        }

        Rectangle {
            background: Palette.background-main;
            BorderHorizontal {
                y: parent.height - 1px;
            }
        }
    }

    Rectangle {
        background: Palette.background-secondary;
        for tab[i] in tabs: TabContent {
            tab: tab;
            visible: i == active_tab;
        }        
    }
}