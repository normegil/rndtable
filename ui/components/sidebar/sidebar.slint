import { SidebarMenu, Menu } from "sidebar-menu.slint";
import { BorderVertical, BorderVerticalResize } from "../borders.slint";
import { SidebarSubMenu } from "sidebar-submenu.slint";
import { Palette } from "../../palette.slint";
import { SubMenu } from "submenu.slint";
import { GeneratorsSubMenu } from "submenus/generators.slint";
import { FiltersSubMenu } from "submenus/filters.slint";
import { SettingsSubMenu } from "submenus/settings.slint";
import { HierarchyEntry } from "../hierarchy.slint";
export component Sidebar inherits Rectangle {
    property <length> submenu-size: 350px;
    property <bool> resizable-border-displayed: true;
    property <Menu> current-menu : Menu.Generators;

    in-out property <string> current_workspace;
    in-out property <[string]> workspaces;
    in-out property <[HierarchyEntry]> generation_entries;
    
    callback generator_entry_clicked(string, string, bool);
    callback workspace_changed(string);
    callback filter_searched_tags(string);

    HorizontalLayout {
        SidebarMenu {
            menu_change(menu) => {
                if (menu == Menu.Closed) {
                    submenu-size = 0px;
                    resizable-border-displayed = false;
                } else if submenu-size == 0px {
                    submenu-size = 350px;
                    resizable-border-displayed = true;
                }
                current-menu = menu;
            }
        }

        BorderVertical {}

        SidebarSubMenu {
            size <=> submenu-size;

            generators-menu := GeneratorsSubMenu {
                visible: current-menu == Menu.Generators;
                current_workspace <=> current_workspace;
                workspaces <=> workspaces;
                entries <=> generation_entries;
                clicked_entry(id, is-folder) => {
                    root.generator_entry_clicked(current_workspace, id, is-folder)
                }
                workspace_changed(workspace-name) => {
                    root.workspace_changed(workspace-name);
                }
            }
            filters-menu := FiltersSubMenu {
                visible: current-menu == Menu.Filters;
                filter_searched_tags(searched) => {
                    root.filter_searched_tags(searched);
                }
            }
            settings-menu := SettingsSubMenu {
                visible: current-menu == Menu.Settings;
            }
        }

        BorderVerticalResize {
            border-left-color: Palette.background-main;
            border-right-color: Palette.background-secondary;
            size: resizable-border-displayed ? 1px : 0px;
            resize(movement) => {
                if (root.submenu-size + movement < 169px) {
                    root.submenu-size = 169px;
                } else {
                    root.submenu-size += movement
                }
            }
        }
    }
}