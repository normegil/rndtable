import { Button, VerticalBox, HorizontalBox } from "std-widgets.slint";
import { Palette } from "palette.slint";
import { BorderVertical, BorderHorizontal } from "./components/borders.slint";
import { Sidebar } from "components/sidebar/sidebar.slint";
import { MainMenu } from "components/main-menu.slint";
import { HierarchyEntry } from "components/sidebar/submenus/hierarchy.slint";
import { FilterEntry } from "components/sidebar/submenus/filters.slint";
import { Tabs, TabData } from "components/tabs.slint";

import "../resources/fonts/lineicons.ttf";
import "../resources/fonts/Lora/Lora-VariableFont_wght.ttf";

enum SidebarButtonPosition {
    Top,
    Bottom
}

struct SidebarButtonData {
    icon: string,
    position: SidebarButtonPosition,
    active: bool,
}

struct Filter {
    name: string,
    enabled: bool,
}

export component AppWindow inherits Window {
    preferred-width: 1024px;
    preferred-height: 768px;

    in-out property <string> current_workspace;
    in-out property <[string]> workspaces;
    in-out property <[HierarchyEntry]> generation_entries;
    in-out property <[FilterEntry]> filters;
    in-out property <int> active_tab;
    in-out property <[TabData]> tabs;

    callback generator_entry_clicked(string, string, bool);
    callback workspace_changed(string);
    callback filter_searched_tags(string);
    callback reverse_filter_activation(string);
    callback reset_filters(string);
    callback close-tab(TabData);

    VerticalLayout {
        MainMenu {}

        BorderHorizontal {}

        Rectangle {
            x: 0;
            
            HorizontalLayout {
                Sidebar {
                    current_workspace <=> current_workspace;
                    workspaces <=> workspaces;
                    generation_entries <=> generation_entries;
                    filters <=> filters;
                    generator_entry_clicked(current_workspace, id, is-folder) => {
                        root.generator_entry_clicked(current_workspace, id, is-folder);
                    }
                    workspace_changed(workspace-name) => {
                        root.workspace_changed(workspace-name);
                    }
                    filter_searched_tags(searched) => {
                        root.filter_searched_tags(searched)
                    }
                    reverse_filter_activation(filter_name) => {
                        root.reverse_filter_activation(filter_name);
                    }
                    reset_filters(current_searched) => {
                        root.reset_filters(current_searched);
                    }
                }

                content := Tabs {
                    active_tab <=> active_tab;
                    tabs <=> tabs;
                    close-tab(tab-data) => {
                        root.close-tab(tab-data);
                    }
                }
            }
        }
    }
}
